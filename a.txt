Here is the report of a dynamic organization (Business department). It has different phases and at each phase it has some inputes and some outputs. 

Collecting
Imputs are sourced at a rate of 100 per time unit.
20% are not retained .
90% move to the business phase.  
Business phase:
Imputs receive messages, with different response rates:
70% do not respond .
20% are rejected .
10% accept and move to School phase.  
School phase:
30% fail the School .
70% pass to First chat.  
First chat:
50% are rejected at this stage .
50% move to the second chat (.  
Second chat:
10% get rejected.
90% proceed to the third interview .
Third chat :
90% are rejected .
10% receive a prize.
prize (P):
20% reject the prize .
80% accept and become consultants .

We want to model the behavior of this dynamic organization with partial differntial equations as in the following we have an example of another dynamic system. Can you write a code to model the above organization in the format of the following? You may choose name of the variables corresponding to the above variables


import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt

################################################################################

class RecruitmentModel:
    def __init__(self, r_s, r_m, r_nr, r_ref, r_ak, r_akneg, r_k, r_kneg, r_r1, r_r2neg, r_r2, r_r3neg, r_p, r_pref, r_c, sourcing_rate=60, time_span=(0, 53), time_steps=100):
        self.sourcing_rate = sourcing_rate
        self.time_span = time_span
        self.t_eval = np.linspace(time_span[0], time_span[1], time_steps)
        
        # Define process rates
        self.r_s = r_s
        self.r_m = r_m
        self.r_nr = r_nr
        self.r_ref = r_ref
        self.r_ak = r_ak  
        self.r_akneg = r_akneg
        self.r_k = r_k  
        self.r_kneg = r_kneg
        self.r_r1 = r_r1
        self.r_r2neg = r_r2neg 
        self.r_r2 = r_r2   
        self.r_r3neg = r_r3neg 
        self.r_p = r_p  
        self.r_pref = r_pref
        self.r_c = r_c 

    def sourcing_function(self, t):
        # return self.sourcing_rate * (1 + 0.5 * np.sin(2 * np.pi * t / 30))
        return self.sourcing_rate

    def recruitment_process(self, t, y):
        S, M, AK, K, R1, R2, P, C = y
        f_s = self.sourcing_function(t)
        
        dS_dt = f_s - self.r_s * S - self.r_m * S
        dM_dt = self.r_m * S - self.r_nr * M - self.r_ref * M - self.r_ak * M
        dAK_dt = self.r_ak * M - self.r_akneg * AK - self.r_k * AK
        dK_dt = self.r_k * AK - self.r_kneg * K - self.r_r1 * K
        dR1_dt = self.r_r1 * K - self.r_r2neg * R1 - self.r_r2 * R1
        dR2_dt = self.r_r2 * R1 - self.r_r3neg * R2 - self.r_p * R2
        dP_dt = self.r_p * R2 - self.r_pref * P - self.r_c * P
        dC_dt = self.r_c * P
        
        return [dS_dt, dM_dt, dAK_dt, dK_dt, dR1_dt, dR2_dt, dP_dt, dC_dt]

    def run_simulation(self):
        y0 = [10, 0, 0, 0, 0, 0, 0, 0]
        sol = solve_ivp(self.recruitment_process, self.time_span, y0, t_eval=self.t_eval)
        return sol

    def plot_results(self, sol):
        plt.figure(figsize=(10,6))
        labels = ["Sourcé", "Messaged", "AKLIFé", "KLIF", "RDV1", "RDV1", "Proposal", "Consultants"]
        for i in range(len(sol.y)):
            plt.plot(sol.t, sol.y[i], label=labels[i])
        plt.xlabel("Time (weeks)")
        plt.ylabel("Number of candidates")
        plt.legend()
        plt.title("Recruitment Process Simulation")
        plt.grid()
        plt.show()

        plt.figure(figsize=(10,6))
        plt.plot(sol.t, sol.y[0], label="Sourcing", linestyle='dashed')
        plt.plot(sol.t, sol.y[7], label="Consultants Accepted", linewidth=2)
        plt.xlabel("Time (weeks)")
        plt.ylabel("Number of candidates")
        plt.legend()
        plt.title("Sourcing vs. Consultants Accepted")
        plt.grid()
        plt.show()

        # Plot the sourcing function over time
        plt.figure(figsize=(10,6))
        plt.plot(self.t_eval, [self.sourcing_function(t) for t in self.t_eval], label="Sourcing Function f_s(t)", color='purple')
        plt.xlabel("Time (weeks)")
        plt.ylabel("Sourcing Rate")
        plt.legend()
        plt.title("Sourcing Function Over Time")
        plt.grid()
        plt.show()

# Define process rates
r_s = 0.1  # Non retenu
r_m = 0.9  # Message envoyé
r_nr = 0.8  # Pas de retour
r_ref = 0.1  # Rejeté
r_ak = 0.1  # Reponse accepté
r_akneg = 0.2  # KLIF negatif
r_k = 0.8  # KLIF positif
r_kneg = 0.6  # RDV1 rejected
r_r1 = 0.4  # RDV1 positif
r_r2neg = 0.1  # RDV2 negatif
r_r2 = 0.9  # RDV2 positif
r_r3neg = 0.5  # RDV3 negatif
r_p = 0.5  # Moves to Proposal
r_pref = 0.2  # Proposal rejected
r_c = 0.8  # Accepted

if __name__ == "__main__":
    model = RecruitmentModel(
        r_s = r_s, 
        r_m = r_m, 
        r_nr = r_nr,  
        r_ref = r_ref,  
        r_ak = r_ak,  
        r_akneg = r_akneg, 
        r_k = r_k,  
        r_kneg = r_kneg, 
        r_r1 = r_r1,  
        r_r2neg = r_r2neg,
        r_r2 = r_r2,
        r_r3neg = r_r3neg,
        r_p = r_p,  
        r_pref = r_pref,  
        r_c = r_c  
    )
    solution = model.run_simulation()
    model.plot_results(solution)